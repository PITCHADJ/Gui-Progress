{
	"version": 3,
	"sources": [
		"resize.ts"
	],
	"names": [
		"Interaction",
		"ActionName",
		"arr",
		"dom",
		"extend",
		"is",
		"Resize",
		"install",
		"scope",
		"actions",
		"browser",
		"Interactable",
		"defaults",
		"resize",
		"cursors",
		"initCursors",
		"defaultMargin",
		"supportsTouch",
		"supportsPointerEvent",
		"prototype",
		"resizable",
		"options",
		"names",
		"push",
		"merge",
		"eventTypes",
		"methodDict",
		"id",
		"listeners",
		"interaction",
		"resizeAxes",
		"arg",
		"start",
		"updateEventAxes",
		"move",
		"end",
		"square",
		"preserveAspectRatio",
		"axis",
		"margin",
		"NaN",
		"edges",
		"invert",
		"checker",
		"_pointer",
		"_event",
		"interactable",
		"element",
		"rect",
		"page",
		"coords",
		"cur",
		"enabled",
		"resizeOptions",
		"resizeEdges",
		"left",
		"right",
		"top",
		"bottom",
		"object",
		"edge",
		"checkResizeEdge",
		"_latestPointer",
		"eventTarget",
		"name",
		"x",
		"y",
		"axes",
		"getCursor",
		"result",
		"cursorKey",
		"setPerAction",
		"setOnEvents",
		"string",
		"test",
		"bool",
		"value",
		"interactableElement",
		"width",
		"number",
		"height",
		"Math",
		"min",
		"matchesUpTo",
		"isIe9",
		"xy",
		"topleft",
		"bottomright",
		"topright",
		"bottomleft",
		"iEvent",
		"prepared",
		"_rects",
		"corrected",
		"previous",
		"delta",
		"deltaRect",
		"invertible",
		"current",
		"startRect",
		"swap",
		"max"
	],
	"mappings": "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",
	"sourcesContent": [
		"import { Interaction } from '@interactjs/core/Interaction'\nimport { ActionName, Scope } from '@interactjs/core/scope'\nimport * as arr from '@interactjs/utils/arr'\nimport * as dom from '@interactjs/utils/domUtils'\nimport extend from '@interactjs/utils/extend'\nimport * as is from '@interactjs/utils/is'\n\nexport type EdgeName = 'top' | 'left' | 'bottom' | 'right'\n\nexport type ResizableMethod = Interact.ActionMethod<Interact.ResizableOptions>\n\ndeclare module '@interactjs/core/Interactable' {\n  interface Interactable {\n    resizable: ResizableMethod\n  }\n}\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    resizeAxes: 'x' | 'y' | 'xy'\n    resizeStartAspectRatio: number\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface ActionDefaults {\n    resize: Interact.ResizableOptions\n  }\n}\n\ndeclare module '@interactjs/core/scope' {\n  interface Actions {\n    [ActionName.Resize]?: typeof resize\n  }\n\n  // eslint-disable-next-line no-shadow\n  enum ActionName {\n    Resize = 'resize'\n  }\n}\n\n(ActionName as any).Resize = 'resize'\n\nexport interface ResizeEvent extends Interact.InteractEvent<ActionName.Resize> {\n  deltaRect?: Interact.FullRect\n  edges?: Interact.ActionProps['edges']\n}\n\nfunction install (scope: Scope) {\n  const {\n    actions,\n    browser,\n    /** @lends Interactable */\n    Interactable, // tslint:disable-line no-shadowed-variable\n    defaults,\n  } = scope\n\n  // Less Precision with touch input\n\n  resize.cursors = initCursors(browser)\n  resize.defaultMargin = browser.supportsTouch || browser.supportsPointerEvent ? 20 : 10\n\n  /**\n   * ```js\n   * interact(element).resizable({\n   *   onstart: function (event) {},\n   *   onmove : function (event) {},\n   *   onend  : function (event) {},\n   *\n   *   edges: {\n   *     top   : true,       // Use pointer coords to check for resize.\n   *     left  : false,      // Disable resizing from left edge.\n   *     bottom: '.resize-s',// Resize if pointer target matches selector\n   *     right : handleEl    // Resize if pointer target is the given Element\n   *   },\n   *\n   *     // Width and height can be adjusted independently. When `true`, width and\n   *     // height are adjusted at a 1:1 ratio.\n   *     square: false,\n   *\n   *     // Width and height can be adjusted independently. When `true`, width and\n   *     // height maintain the aspect ratio they had when resizing started.\n   *     preserveAspectRatio: false,\n   *\n   *   // a value of 'none' will limit the resize rect to a minimum of 0x0\n   *   // 'negate' will allow the rect to have negative width/height\n   *   // 'reposition' will keep the width/height positive by swapping\n   *   // the top and bottom edges and/or swapping the left and right edges\n   *   invert: 'none' || 'negate' || 'reposition'\n   *\n   *   // limit multiple resizes.\n   *   // See the explanation in the {@link Interactable.draggable} example\n   *   max: Infinity,\n   *   maxPerElement: 1,\n   * })\n   *\n   * var isResizeable = interact(element).resizable()\n   * ```\n   *\n   * Gets or sets whether resize actions can be performed on the target\n   *\n   * @param {boolean | object} [options] true/false or An object with event\n   * listeners to be fired on resize events (object makes the Interactable\n   * resizable)\n   * @return {boolean | Interactable} A boolean indicating if this can be the\n   * target of resize elements, or this Interactable\n   */\n  Interactable.prototype.resizable = function (this: Interact.Interactable, options: Interact.ResizableOptions | boolean) {\n    return resizable(this, options, scope)\n  } as ResizableMethod\n\n  actions[ActionName.Resize] = resize\n  actions.names.push(ActionName.Resize)\n  arr.merge(actions.eventTypes, [\n    'resizestart',\n    'resizemove',\n    'resizeinertiastart',\n    'resizeresume',\n    'resizeend',\n  ])\n  actions.methodDict.resize = 'resizable'\n\n  defaults.actions.resize = resize.defaults\n}\n\nconst resize: Interact.Plugin = {\n  id: 'actions/resize',\n  install,\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.resizeAxes = 'xy'\n    },\n\n    'interactions:action-start': arg => {\n      start(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-move': arg => {\n      move(arg)\n      updateEventAxes(arg)\n    },\n    'interactions:action-end': end,\n  },\n\n  defaults: {\n    square: false,\n    preserveAspectRatio: false,\n    axis: 'xy',\n\n    // use default margin\n    margin: NaN,\n\n    // object with props left, right, top, bottom which are\n    // true/false values to resize when the pointer is over that edge,\n    // CSS selectors to match the handles for each direction\n    // or the Elements for each handle\n    edges: null,\n\n    // a value of 'none' will limit the resize rect to a minimum of 0x0\n    // 'negate' will alow the rect to have negative width/height\n    // 'reposition' will keep the width/height positive by swapping\n    // the top and bottom edges and/or swapping the left and right edges\n    invert: 'none',\n  } as Interact.ResizableOptions,\n\n  checker (\n    _pointer: Interact.PointerType,\n    _event: Interact.PointerEventType,\n    interactable: Interact.Interactable,\n    element: Interact.Element,\n    interaction: Interaction,\n    rect: Interact.Rect,\n  ) {\n    if (!rect) { return null }\n\n    const page = extend({}, interaction.coords.cur.page)\n    const options = interactable.options\n\n    if (options.resize.enabled) {\n      const resizeOptions = options.resize\n      const resizeEdges = {\n        left: false,\n        right: false,\n        top: false,\n        bottom: false,\n      }\n\n      // if using resize.edges\n      if (is.object(resizeOptions.edges)) {\n        for (const edge in resizeEdges) {\n          resizeEdges[edge] = checkResizeEdge(edge,\n            resizeOptions.edges[edge],\n            page,\n            interaction._latestPointer.eventTarget,\n            element,\n            rect,\n            resizeOptions.margin || this.defaultMargin)\n        }\n\n        resizeEdges.left = resizeEdges.left && !resizeEdges.right\n        resizeEdges.top  = resizeEdges.top  && !resizeEdges.bottom\n\n        if (resizeEdges.left || resizeEdges.right || resizeEdges.top || resizeEdges.bottom) {\n          return {\n            name: 'resize',\n            edges: resizeEdges,\n          }\n        }\n      }\n      else {\n        const right  = options.resize.axis !== 'y' && page.x > (rect.right  - this.defaultMargin)\n        const bottom = options.resize.axis !== 'x' && page.y > (rect.bottom - this.defaultMargin)\n\n        if (right || bottom) {\n          return {\n            name: 'resize',\n            axes: (right ? 'x' : '') + (bottom ? 'y' : ''),\n          }\n        }\n      }\n    }\n\n    return null\n  },\n\n  cursors: null as ReturnType<typeof initCursors>,\n\n  getCursor ({ edges, axis, name }: Interact.ActionProps) {\n    const cursors = resize.cursors\n    let result: string = null\n\n    if (axis) {\n      result = cursors[name + axis]\n    }\n    else if (edges) {\n      let cursorKey = ''\n\n      for (const edge of ['top', 'bottom', 'left', 'right']) {\n        if (edges[edge]) {\n          cursorKey += edge\n        }\n      }\n\n      result = cursors[cursorKey]\n    }\n\n    return result\n  },\n\n  defaultMargin: null as number,\n}\n\nfunction resizable (interactable: Interact.Interactable, options: Interact.OrBoolean<Interact.ResizableOptions> | boolean, scope: Scope) {\n  if (is.object(options)) {\n    interactable.options.resize.enabled = options.enabled !== false\n    interactable.setPerAction(ActionName.Resize, options)\n    interactable.setOnEvents(ActionName.Resize, options)\n\n    if (is.string(options.axis) && /^x$|^y$|^xy$/.test(options.axis)) {\n      interactable.options.resize.axis = options.axis\n    }\n    else if (options.axis === null) {\n      interactable.options.resize.axis = scope.defaults.actions.resize.axis\n    }\n\n    if (is.bool(options.preserveAspectRatio)) {\n      interactable.options.resize.preserveAspectRatio = options.preserveAspectRatio\n    }\n    else if (is.bool(options.square)) {\n      interactable.options.resize.square = options.square\n    }\n\n    return interactable\n  }\n  if (is.bool(options)) {\n    interactable.options.resize.enabled = options\n\n    return interactable\n  }\n  return interactable.options.resize\n}\n\nfunction checkResizeEdge (\n  name: string,\n  value: any,\n  page: Interact.Point,\n  element: Node,\n  interactableElement: Interact.Element,\n  rect: Interact.Rect,\n  margin: number,\n) {\n  // false, '', undefined, null\n  if (!value) { return false }\n\n  // true value, use pointer coords and element rect\n  if (value === true) {\n    // if dimensions are negative, \"switch\" edges\n    const width  = is.number(rect.width) ? rect.width  : rect.right  - rect.left\n    const height = is.number(rect.height) ? rect.height : rect.bottom - rect.top\n\n    // don't use margin greater than half the relevent dimension\n    margin = Math.min(margin, (name === 'left' || name === 'right' ? width : height) / 2)\n\n    if (width < 0) {\n      if      (name === 'left')  { name = 'right' }\n      else if (name === 'right') { name = 'left'  }\n    }\n    if (height < 0) {\n      if      (name === 'top')    { name = 'bottom' }\n      else if (name === 'bottom') { name = 'top'    }\n    }\n\n    if (name === 'left') { return page.x < ((width  >= 0 ? rect.left : rect.right) + margin) }\n    if (name === 'top') { return page.y < ((height >= 0 ? rect.top : rect.bottom) + margin) }\n\n    if (name === 'right') { return page.x > ((width  >= 0 ? rect.right : rect.left) - margin) }\n    if (name === 'bottom') { return page.y > ((height >= 0 ? rect.bottom : rect.top) - margin) }\n  }\n\n  // the remaining checks require an element\n  if (!is.element(element)) { return false }\n\n  return is.element(value)\n  // the value is an element to use as a resize handle\n    ? value === element\n    // otherwise check if element matches value as selector\n    : dom.matchesUpTo(element, value, interactableElement)\n}\n\nfunction initCursors (browser: typeof import ('@interactjs/utils/browser').default) {\n  return (browser.isIe9 ? {\n    x : 'e-resize',\n    y : 's-resize',\n    xy: 'se-resize',\n\n    top        : 'n-resize',\n    left       : 'w-resize',\n    bottom     : 's-resize',\n    right      : 'e-resize',\n    topleft    : 'se-resize',\n    bottomright: 'se-resize',\n    topright   : 'ne-resize',\n    bottomleft : 'ne-resize',\n  } : {\n    x : 'ew-resize',\n    y : 'ns-resize',\n    xy: 'nwse-resize',\n\n    top        : 'ns-resize',\n    left       : 'ew-resize',\n    bottom     : 'ns-resize',\n    right      : 'ew-resize',\n    topleft    : 'nwse-resize',\n    bottomright: 'nwse-resize',\n    topright   : 'nesw-resize',\n    bottomleft : 'nesw-resize',\n  })\n}\n\nfunction start ({ iEvent, interaction }: { iEvent: ResizeEvent, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) {\n    return\n  }\n\n  const rect = interaction.rect\n\n  interaction._rects = {\n    start: extend({}, rect),\n    corrected: extend({}, rect),\n    previous: extend({}, rect),\n    delta: {\n      left: 0,\n      right : 0,\n      width : 0,\n      top : 0,\n      bottom: 0,\n      height: 0,\n    },\n  }\n\n  iEvent.edges = interaction.prepared.edges\n  iEvent.rect = interaction._rects.corrected\n  iEvent.deltaRect = interaction._rects.delta\n}\n\nfunction move ({ iEvent, interaction }: { iEvent: ResizeEvent, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) { return }\n\n  const resizeOptions = interaction.interactable.options.resize\n  const invert = resizeOptions.invert\n  const invertible = invert === 'reposition' || invert === 'negate'\n\n  // eslint-disable-next-line no-shadow\n  const current = interaction.rect\n  const { start: startRect, corrected, delta: deltaRect, previous } = interaction._rects\n\n  extend(previous, corrected)\n\n  if (invertible) {\n    // if invertible, copy the current rect\n    extend(corrected, current)\n\n    if (invert === 'reposition') {\n      // swap edge values if necessary to keep width/height positive\n      if (corrected.top > corrected.bottom) {\n        const swap = corrected.top\n\n        corrected.top = corrected.bottom\n        corrected.bottom = swap\n      }\n      if (corrected.left > corrected.right) {\n        const swap = corrected.left\n\n        corrected.left = corrected.right\n        corrected.right = swap\n      }\n    }\n  }\n  else {\n    // if not invertible, restrict to minimum of 0x0 rect\n    corrected.top    = Math.min(current.top, startRect.bottom)\n    corrected.bottom = Math.max(current.bottom, startRect.top)\n    corrected.left   = Math.min(current.left, startRect.right)\n    corrected.right  = Math.max(current.right, startRect.left)\n  }\n\n  corrected.width  = corrected.right  - corrected.left\n  corrected.height = corrected.bottom - corrected.top\n\n  for (const edge in corrected) {\n    deltaRect[edge] = corrected[edge] - previous[edge]\n  }\n\n  iEvent.edges = interaction.prepared.edges\n  iEvent.rect = corrected\n  iEvent.deltaRect = deltaRect\n}\n\nfunction end ({ iEvent, interaction }: { iEvent: ResizeEvent, interaction: Interaction }) {\n  if (interaction.prepared.name !== 'resize' || !interaction.prepared.edges) { return }\n\n  iEvent.edges = interaction.prepared.edges\n  iEvent.rect = interaction._rects.corrected\n  iEvent.deltaRect = interaction._rects.delta\n}\n\nfunction updateEventAxes ({ iEvent, interaction }: { iEvent: ResizeEvent, interaction: Interaction }) {\n  if (interaction.prepared.name !== ActionName.Resize || !interaction.resizeAxes) { return }\n\n  const options = interaction.interactable.options\n\n  if (options.resize.square) {\n    if (interaction.resizeAxes === 'y') {\n      iEvent.delta.x = iEvent.delta.y\n    }\n    else {\n      iEvent.delta.y = iEvent.delta.x\n    }\n    iEvent.axes = 'xy'\n  }\n  else {\n    iEvent.axes = interaction.resizeAxes\n\n    if (interaction.resizeAxes === 'x') {\n      iEvent.delta.y = 0\n    }\n    else if (interaction.resizeAxes === 'y') {\n      iEvent.delta.x = 0\n    }\n  }\n}\n\nexport default resize\n"
	]
}